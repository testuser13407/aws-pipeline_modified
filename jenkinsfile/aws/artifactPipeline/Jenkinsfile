/*
*  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
*
*  WSO2 Inc. licenses this file to you under the Apache License,
*  Version 2.0 (the "License"); you may not use this file except
*  in compliance with the License.
*  You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/

@Library('wso2-jenkins-shared-lib')
import org.wso2.util.Constants

//Nodes
def NODE_MASTER = "master"
node(NODE_MASTER) {

    def ENVIRONMENT = "${params.BRANCH}"
    def BRANCH = "*/${params.BRANCH}"
    def PRODUCT = "${params.PRODUCT}"

    //Constants
    def DEV_EFS_IDENTIFIER = "DEV_EFS_IP"
    def STAGING_EFS_IDENTIFIER = "STAGING_EFS_IP"
    def PROD_EFS_IDENTIFIER = "PROD_EFS_IP"
    def GITHUB_CREDS = "github_creds"

    //Directories
    def ARTIFACTS_SOURCE = "cicd-test-artifacts"
    def ARTIFACT_DEPLOYMENT_DIR = "carbonapps"

    //Mount Points
     def EFS_MOUNT = "/mnt/${ENVIRONMENT}-efs"
     def ARTIFACT_CONF = "${WORKSPACE}/${ARTIFACTS_SOURCE}/buildArtifact.sh"

    // Resource Locations
    def ARTIFACTS_DIR = "artifacts"
    def ARTIFACTS_DIR_LOC = "${WORKSPACE}/${ARTIFACTS_DIR}"

    //Config Files
    def ENV = '/home/jenkins/jenkins_env'

    try {
        stage(Constants.Stages.CLONE_ARTIFACT_SOURCE) {
            log.info "Cloning artifact Source"
            file = load ENV
            env.REGION = getAvailabilityZone()
            cloneRepoToDir ([repoUrl    :"${env.GIT_REPO_ARTIFACTS}",
                             directory  :"${ARTIFACTS_SOURCE}",
                             branch     :"${BRANCH}",
                             credID     :"${GITHUB_CREDS}" ])
        }

        stage(Constants.Stages.BUILD_ARTIFACTS) {
            if (!fileExists("${ARTIFACTS_DIR}")) {
                   sh "mkdir $ARTIFACTS_DIR"
            }
            log.info "Build product artifacts"
            buildArtifacts([artifactConf       : "${ARTIFACT_CONF}",
                            artifactsLoc       : "${WORKSPACE}/${ARTIFACTS_SOURCE}",
                            image_resources    : "${ARTIFACTS_DIR_LOC}"])
        }

        stage(Constants.Stages.MOUNT_EFS) {
            if (ENVIRONMENT == "staging") {
                EFS_IP = env.STAGING_EFS_IP
            } else if (ENVIRONMENT == "dev") {
                EFS_IP = env.DEV_EFS_IP
            } else {
                EFS_IP = env.PROD_EFS_IP
            }
            log.info "Mounting EFS"
            mountEFS([
                 mountPoint : "${EFS_MOUNT}",
                 efsIp      : "${EFS_IP}",
                 region     : "${env.REGION}"
            ])
        }

        stage(Constants.Stages.COPY_ARTIFACTS) {
            if (PRODUCT == "wso2am") {
                ARTIFACT_DEPLOYMENT_DIR = "webapps"
            }
            log.info "Copying environment artifacts"
             copyArtifacts ([image_resources:"${ARTIFACTS_DIR_LOC}",
                             mountDir       :"${ARTIFACT_DEPLOYMENT_DIR}",
                             mountPoint     :"${EFS_MOUNT}"])
        }

        stage(Constants.Stages.UNMOUNT_EFS) {
            unmountEFS([mountPoint : "${EFS_MOUNT}"])
        }

    } catch (exc) {
        log.err "Caught: ${exc}"
        String recipient = env.Email
        mail subject: "${env.JOB_NAME} (${env.BUILD_NUMBER}) build failed",
                body: "${env.JOB_NAME} build ${env.BUILD_NUMBER} failed in Jenkins. Check console output at $BUILD_URL to view the results.",
                to: recipient,
                replyTo: recipient,
                from: 'noreply@wso2cicd.com'
        throw exc
    }

}
